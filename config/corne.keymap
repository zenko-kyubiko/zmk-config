#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combos_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <15 14>;
            layers = <0>;
        };

        combos_caps_lock {
            bindings = <&caps_word>;
            key-positions = <17 18>;
            layers = <0>;
        };

        combos_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <20 21>;
            layers = <0>;
        };

        combos_under {
            bindings = <&kp UNDERSCORE>;
            key-positions = <16 19>;
            layers = <0>;
        };

        combos_shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <15 20>;
            layers = <0>;
        };

        combos_equal {
            bindings = <&kp EQUAL>;
            key-positions = <14 21>;
            layers = <0>;
        };

        combos_to_layer_colemak-dh {
            bindings = <&to 0>;
            key-positions = <3 8>;
        };

        combos_to_layer_gaming {
            bindings = <&to 1>;
            key-positions = <2 10>;
        };
    };

    macros {
        macro_less_than_equal: less_than_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp EQUAL>;
            label = "LESS_THAN_EQUAL";
        };

        macro_greater_than_equal: more_than_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GREATER_THAN &kp EQUAL>;
            label = "MORE_THAN_EQUAL";
        };

        toggle_off_upper_layer: toggle_off_upper_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&toggle_off 2 &toggle_off 3 &toggle_off 4 &toggle_off 5>;
            label = "TOGGLE_OFF_UPPER_LAYER";
        };
    };

    behaviors {
        less_than_equal: less_than_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "LESS_THAN_EQUAL";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN>, <&macro_less_than_equal>;

            tapping-term-ms = <200>;
        };

        greater_than_equal: greater_than_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "GREATER_THAN_EQUAL";
            #binding-cells = <0>;
            bindings = <&kp GREATER_THAN>, <&macro_greater_than_equal>;

            tapping-term-ms = <200>;
        };

        space_tab: space_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "SPACE_TAB";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp TAB>;

            tapping-term-ms = <200>;
        };

        repeat_enter: repeat_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "REPEAT_ENTER";
            #binding-cells = <0>;
            bindings = <&key_repeat>, <&kp ENTER>;

            tapping-term-ms = <200>;
        };

        minus_plus: minus_plus {
            compatible = "zmk,behavior-tap-dance";
            label = "MINUS_PLUS";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;

            tapping-term-ms = <200>;
        };

        divide_multiply: divide_multiply {
            compatible = "zmk,behavior-tap-dance";
            label = "DIVIDE_MULTIPLY";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp ASTERISK>;

            tapping-term-ms = <200>;
        };

        zero_equal: zero_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "ZERO_EQUAL";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_0>, <&kp EQUAL>;

            tapping-term-ms = <200>;
        };

        toggle_off: toggle_off {
            compatible = "zmk,behavior-toggle-layer";
            label = "TOGGLE_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_colemak-dh {
            bindings = <
&none  &kp Q  &kp W  &kp F  &kp P   &kp B         &kp J          &kp L   &kp U      &kp Y    &none  &none
&none  &kp A  &kp R  &kp S  &kp T   &kp G         &kp M          &kp N   &kp E      &kp I    &kp O  &none
&none  &kp Z  &kp X  &kp C  &kp D   &kp V         &kp K          &kp H   &kp COMMA  &kp DOT  &none  &none
                     &none  &tog 2  &space_tab    &repeat_enter  &tog 3  &none
            >;

            label = "base_colemak-dh";
        };

        base_gaming {
            label = "base_gaming";
            bindings = <
&none  &kp ESCAPE        &kp A  &kp W  &kp E         &kp R        &none  &none  &none  &none  &none  &none
&none  &kp LEFT_SHIFT    &kp Q  &kp S  &kp D         &kp F        &none  &none  &none  &none  &none  &none
&none  &kp LEFT_CONTROL  &kp Z  &kp X  &kp C         &kp V        &none  &none  &none  &none  &none  &none
                                &none  &kp LEFT_ALT  &kp SPACE    &none  &to 0  &none
            >;
        };

        navigation_shortcuts {
            bindings = <
&none  &kp LC(Z)     &kp LC(X)         &kp LC(C)       &kp LC(V)                &kp LC(S)    &kp ESCAPE  &kp HOME        &kp PAGE_DOWN      &kp PAGE_UP      &kp END             &none
&none  &sk LEFT_ALT  &sk LEFT_CONTROL  &sk LEFT_SHIFT  &sk LEFT_GUI             &kp DEL      &kp BSPC    &kp LEFT_ARROW  &kp DOWN_ARROW     &kp UP_ARROW     &kp RIGHT_ARROW     &none
&none  &none         &none             &none           &none                    &none        &kp C_PP    &kp C_REWIND    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_FAST_FORWARD  &none
                                       &none           &toggle_off_upper_layer  &trans       &trans      &tog 4          &none
            >;

            label = "navigation_shortcuts";
        };

        symbol {
            bindings = <
&none  &kp AT_SIGN          &kp AMPERSAND    &kp PIPE              &kp COLON          &kp DOUBLE_QUOTES    &kp BACKSLASH  &kp QUESTION             &kp EXCLAMATION  &kp ASTERISK  &kp UNDERSCORE  &none
&none  &less_than_equal     &kp LEFT_BRACE   &kp LEFT_PARENTHESIS  &kp LEFT_BRACKET   &kp EQUAL            &kp SEMICOLON  &sk RGUI                 &sk RSHFT        &sk RCTRL     &sk RALT        &none
&none  &greater_than_equal  &kp RIGHT_BRACE  &kp RPAR              &kp RIGHT_BRACKET  &kp SINGLE_QUOTE     &kp SLASH      &kp HASH                 &kp DOLLAR       &kp TILDE     &kp GRAVE       &none
                                             &none                 &tog 4             &trans               &trans         &toggle_off_upper_layer  &none
            >;

            label = "symbol";
        };

        number {
            bindings = <
&none  &none  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6             &minus_plus         &kp F11  &kp F6                   &kp F5  &kp F4  &none  &none
&none  &none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3             &zero_equal         &kp F10  &kp F3                   &kp F2  &kp F1  &none  &none
&none  &sl 5  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9             &divide_multiply    &kp F12  &kp F9                   &kp F8  &kp F7  &sl 5  &none
                            &none         &toggle_off_upper_layer  &trans              &trans   &toggle_off_upper_layer  &none
            >;

            label = "number";
        };

        system {
            bindings = <
&none  &to 1  &bt BT_SEL 4  &none         &none                    &bt BT_CLR      &bt BT_CLR    &none                    &none         &bt BT_SEL 4  &to 1  &none
&none  &to 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3             &bt BT_SEL 0    &bt BT_SEL 0  &bt BT_SEL 3             &bt BT_SEL 2  &bt BT_SEL 1  &to 0  &none
&none  &none  &none         &none         &none                    &sys_reset      &sys_reset    &none                    &none         &none         &none  &none
                            &none         &toggle_off_upper_layer  &trans          &trans        &toggle_off_upper_layer  &none
            >;

            label = "system";
        };
    };
};
